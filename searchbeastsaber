#!/usr/bin/python3
#	pybsaberdb - Python interface to BeastSaber database
#	Copyright (C) 2019-2020 Johannes Bauer
#
#	This file is part of pybsaberdb.
#
#	pybsaberdb is free software; you can redistribute it and/or modify
#	it under the terms of the GNU General Public License as published by
#	the Free Software Foundation; this program is ONLY licensed under
#	version 3 of the License, later versions are explicitly excluded.
#
#	pybsaberdb is distributed in the hope that it will be useful,
#	but WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#	GNU General Public License for more details.
#
#	You should have received a copy of the GNU General Public License
#	along with pybsaberdb; if not, write to the Free Software
#	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#	Johannes Bauer <JohannesBauer@gmx.de>

import os
import requests
import contextlib
import shutil
import sys
from BeastSaberDB import BeastSaberDB
from FriendlyArgumentParser import FriendlyArgumentParser

class SongDownloader():
	def __init__(self, args):
		self._args = args
		with contextlib.suppress(FileExistsError):
			os.makedirs(self._args.download_dir)
		if self._args.symlink_dir is not None:
			with contextlib.suppress(FileExistsError):
				os.makedirs(self._args.symlink_dir)
		self._session = requests.Session()

	def download(self, song):
		output_file = self._args.download_dir + "/" + song.song_hash + ".zip"
		if os.path.isfile(output_file):
			return
		headers = {
			"User-Agent":	"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/73.0.3683.75 Chrome/73.0.3683.75 Safari/537.36",
		}
		response = self._session.get(song.download_url, headers = headers)
		if response.status_code == 200:
			with open(output_file, "wb") as f:
				f.write(response.content)
		else:
			print("Failed to retrieve %s: %s (%s)" % (song, response, song.download_url))

	def symlink(self, song):
		src_file = os.path.realpath(self._args.download_dir + "/" + song.song_hash + ".zip")
		dst_file = self._args.symlink_dir + "/" + song.song_hash + ".zip"
		with contextlib.suppress(FileExistsError):
			os.symlink(src_file, dst_file)

parser = FriendlyArgumentParser(description = "Search a locally mirrored Beast Saber database and bulk download the song files.")
parser.add_argument("-d", "--difficulty", metavar = "difficulty", choices = [ "easy", "normal", "hard", "expert", "expert+" ], action = "append", default = [ ], help = "Specify a difficulty level the song must provide. Can be specified multiple times.")
parser.add_argument("-p", "--min-percentage", metavar = "percent", type = float, help = "Specify a minimum positive percentage rating a song must have.")
parser.add_argument("-m", "--min-votes", metavar = "count", type = int, help = "Specify a minimum number of votes that a song must have.")
parser.add_argument("-e", "--exclude-category", metavar = "category", type = str, action = "append", default = [ ], help = "Specify a genre category that should be excluded. Can be specified multiple times.")
parser.add_argument("-i", "--include-category", metavar = "category", type = str, action = "append", default = [ ], help = "Specify a genre category that must be included. Can be specified multiple times.")
parser.add_argument("-t", "--song-title", metavar = "title", type = str, action = "append", default = [ ], help = "Specify words that must be included in the title. Can be specified multiple times.")
parser.add_argument("-a", "--level-author", metavar = "author", type = str, action = "append", default = [ ], help = "Specify words that must be included in the level author. Can be specified multiple times.")
parser.add_argument("--recommended", action = "store_true", help = "Specify that the song must be recommended.")
parser.add_argument("-l", "--download", action = "store_true", help = "Download the song files.")
parser.add_argument("-o", "--download-dir", metavar = "dir", type = str, default = "download", help = "Specify a download directory. Defaults to %(default)s.")
parser.add_argument("--symlink-dir", metavar = "dir", type = str, help = "Not only download a song to a specified directory, but create a symbol link as well. Can be used to easily download a lot of songs and then filter them later.")
parser.add_argument("--limit", metavar = "count", type = int, help = "Limit to this number of songs total.")
parser.add_argument("-v", "--verbose", action = "count", default = 0, help = "Increases verbosity. Can be specified multiple times to increase.")
args = parser.parse_args(sys.argv[1:])

search_criteria = { }
if args.min_votes is not None:
	search_criteria["minimum_votes"] = args.min_votes
if args.min_percentage is not None:
	search_criteria["minimum_percentage"] = args.min_percentage
if len(args.difficulty) > 0:
	search_criteria["must_have_difficulties"] = args.difficulty
if len(args.exclude_category) > 0:
	search_criteria["exclude_categories"] = args.exclude_category
if len(args.include_category) > 0:
	search_criteria["include_categories"] = args.include_category
if len(args.song_title) > 0:
	search_criteria["song_title"] = args.song_title
if len(args.level_author) > 0:
	search_criteria["level_author"] = args.level_author
if args.recommended:
	search_criteria["must_be_recommended"] = True

if args.verbose >= 1:
	print("Search criteria: %s" % (str(search_criteria)))

downloader = SongDownloader(args)
db = BeastSaberDB()
songs = list(db.search_songs(**search_criteria))
songs.sort(key = lambda song: -song.percentage)
if args.limit is not None:
	songs = songs[:args.limit]
print("Found %d songs that match these criteria." % (len(songs)))
for song in songs:
	print(song)

if args.download:
	for (songno, song) in enumerate(songs, 1):
		print("%3d / %3d %5.1f%% %s" % (songno, len(songs), songno / len(songs) * 100, song))
		downloader.download(song)
		if args.symlink_dir is not None:
			downloader.symlink(song)
